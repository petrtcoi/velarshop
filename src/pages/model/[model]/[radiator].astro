---
import Layout from '@shared/layouts/Layout.astro'

import RadiatorTitle from '@widgets/pageRadiator/RadiatorTitle.astro'
import RadiatorBasicInfo from '@widgets/pageRadiator/RadiatorBasicInfo.astro'
import ModelDownloadSchema from '@features/model/ModelDownloadShema/ModelDownloadSchema.astro'

import RelatedModels from '@features/model/RelatedModels/RelatedModels.astro'
import RelatedItems from '@features/radiator/RelatedItems/RelatedItems.astro'
import ModelDescription from '@features/model/ModelDescription/ModelDescription.astro'
import ModelsImagesGallery from '@features/model/ModelsImagesGallery/ModelsImagesGallery.astro'
import ModelAdditionalInfo from '@features/model/ModelAdditionalInfo/ModelAdditionalInfo.astro'

import { modelsJsonData } from '@entities/Model'
import { radiatorsJsonData } from '@entities/Radiator'

import type { ModelJson } from '@entities/Model'
import type { RadiatorJson } from '@entities/Radiator'
import { getRadiatorTitle } from '@shared/utils/getRadiatorTitle'
import { getModelSlug } from '@shared/utils/getModelSlug';
import Breadcrumbs from '@widgets/breadcrumbs/Breadcrumbs.astro';

export async function getStaticPaths() {
	return radiatorsJsonData.map(radiator => {
		const model = modelsJsonData.find(m => radiator.model_id === m.id)
		if (!model) throw `No model for ${radiator.slug}`
		return {
			params: { model: model.slug, radiator: radiator.slug },
			props: { model, radiator },
		}
	})
}

export type Props = {
	model: ModelJson
	radiator: RadiatorJson
}
const { model, radiator } = Astro.props as Props

const radiatorName = `${model.prefix} Velar ${getRadiatorTitle({
			model,
			radiator,
	})}`

const description = `Купить ${radiatorName} c доставкой по России. Официальная гарантия. Полный модельный ряд и быстрые сроки производства. https://velarshop.ru${getModelSlug(model)}`
const canonicalUrl = `https://velarshop.ru${getModelSlug(model)}`



let modelCrumbTitle = 'Дизайн-радиаторы'
let modelCrumbUrl = '/design'

if (model.type === 'columns') {
	modelCrumbTitle = 'Трубчатые радиаторы'
	modelCrumbUrl = '/columns'
}
if (model.type === 'convector') {
	modelCrumbTitle = 'Внутрипольные конвекторы'
		modelCrumbUrl = '/convector'
}
if (model.type === 'floor') {
	modelCrumbTitle = 'Напольные радиаторы'
		modelCrumbUrl = '/floor'
}	
if (model.type === 'ironcast') {
	modelCrumbTitle = 'Чугунные ретро-радиаторы'
		modelCrumbUrl = '/retro'
}
const radiatorCrumbTitle =getRadiatorTitle({
			model,
			radiator,
	})
const crumbs = [
	{title: 'Главная', url: '/'},
	{title: modelCrumbTitle, url: modelCrumbUrl},
	{title: `Velar ${model.name}`, url: `/model/${model.slug}`},
	{title: `${radiatorCrumbTitle}`, url: `/model/${model.slug}/${radiator.slug}`},
]
---

<Layout
		title={`${radiatorName} купить в VelarShop.ru`}
		description={description}
	canonicalUrl={canonicalUrl}
>
<section class="mb-3">
		<Breadcrumbs items={crumbs} />
</section>

	<!-- <LinkToModelPage model={model} /> -->
	<RadiatorTitle
		model={model}
		radiator={radiator}
	/>
	<RadiatorBasicInfo
		model={model}
		radiator={radiator}
	/>
	<div class='mt-10'>
		<ModelDescription
			slug={model.slug}
			isColumns={model.type === 'columns'}
		/>
	</div>
	<ModelDownloadSchema model={model} />
	<ModelAdditionalInfo model={model} />

	<ModelsImagesGallery
		title={`Дополнительные изображения Velar ${model.name}`}
		ignoreMain={true}
		model={model}
	/>
	<RelatedItems radiator={radiator} />
	<RelatedModels model={model} />
</Layout>
